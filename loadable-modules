1) Init
-------

LICENSE macro used to expose reduced facilities if not GPL.
MODULE_AUTHOR
MODULE_DESCRIPTION

Can be getted with $ modinfo module.ko

module_init(init_callback)
module_exit(clear_callback)

Linux uses reference counters for LKM (loadable kernel modules).
Used for dependency manageent (e.g. 2 modules depending on the same module)

try_module_get() incr refcount
module_put() decr refcount

if CONFIG_MODULE_UNLOAD is not set at compile time the kernel will not unload
the module.

2) Parameters
-------------

module_param(var, type, perm)
module_param_array

located in sys

IWOTH cannot be used in perms.

3) Build and install
--------------------

Uses headers installed in system and KBuild.

Load module:
$ sudo insmod module.ko
$ sudo insmod module.ko param=value

(parameters with spaces must be incapsulated in quotes)

$ sudo insmod module.ko param='"value"' # double quote fuck u bash

Access printk logs:
$ dmsg

Unmount:
$ rmmod module

4) Loading
----------

Kernel will search for avaiable memory for the module code and data via vmalloc.

Modules are PIC. 

In x86_64 we can use RIP-relative data access. mov $0, offset(%rip).

init_module(image, len, param_values)
finit_module(fd, param_values, flags)
delete_module(name, flags)

These syscalls requires priviledges.

modpost creates the .ko from .o and and additional C file .mod.c.

Exported symbols with EXPORT_SYMBOL (include/linux/module.h) can be referred by
other modules.

Symbols are in __ksymtab.

5) Kprobes
----------

Register a probe (handler) pre or post for a function.

CONFIG_KPROBES=y

register_kprobe(kprobe* p)
unregister_kprobe(kprobe* p)

Using int3 breakpoint.

Set TF=1 trap flag for single step. After the exec of a single instruction cpu 
will generate hardware breakpoint. 

Kprobe on not exported symbol.

struct kprobe kp
kb.symbol_name = "flush_tlb_all"
register_kprobe(&kp)
kp.addr <--- yeee
unregister_kprobe(&kp)

kretprobe for ret on routines.

6) Versions
-----------

include/linux/version.h

KERNEL_VERSION(major, minor, release) -> packed in int
compare with LINUX_VERSION_CODE

7) Locating syscalls table
--------------------------

Syscall table is pointing to wrappers (__x64_sys_x) instead of sys_x.

__x64_sys_x copy pt_regs in actual regs and the call sys_x.

We must look at syscall dispacther in LSTAR (entry_syscall_64 or similar).
This function do several things, then call do_syscall_64 implements the access
to the syscall entry.

We must look at the bytecode of such function.

Locate the call to do_syscall_64 (use pattern of bytes) and read the offset.

mov rdi, rax
mov rsi, rsp
call do_syscall_64

do_syscall_64 calls then pt->rax = syscall_table[nr](pt).

Now to get teh syscall tabe we must locate the patter to this code.

There a re two pattern, one the indirect call and the another the retpoline,
referes to syscalls.6 chapter.

With retpoline is quite complicated, the pattern changes a lot due to different
registers allocations.

mov rax, DWORD PTR [rbx*8]
mov rcx, DWORD PTR [rsi*8]
mov r11, DWORD PTR [rbx*8]

Uses a length disassembler to do this. All the instructions that we must search
are 8 bytes long. The second byte is the actual opcode, mov (0x8b).
We check also REX prefix to check of the dest reg is 64 bit. This must be true
because they are function pointers.
We check also the third byte to check that MOD = 0 and R/M = 100, aka 0 as
displacement base and 8 as index.

To write in syscall table we must remove write protection.
In CR0 we have a bit that set the write policy.




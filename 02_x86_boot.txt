====================
The x86 boot process
====================

1) Initial stage
----------------

After the hardware power setup the system is very basic:

 - No caches
 - MMU disabled
 - CPU in Real Mode
 - Only one core
 - Empty RAM

There are 4 basic 16 bit segment registers:

 - CS
 - DS
 - SS
 - ES (extra, used by programmer)

FS and GS added later.

All instructions that use memory access segments.
For example, jump uses cs implicitly, push uses ss implicitly.
Segment registers can be loaded with mov but CS only with call/jmp.

In Real Mode, there are 20 bits addresses (1 MB address space). The address in
segments are the 16 bits higher part.
The translation is done with: Segment selector * 16 + offset.

E.g. jmp 0x6025 with CS = 0x1000 ---> 0x16025

Addresses can overlap and the format is 0000:0000. Some addresses can be
represented but not handled (> 20 bits) and teh last usable address is
000f:ffff.

For compatibility the address space can wrappend-around.
Address line 20 is forced to 0.

2) BIOS
-------

The first fetched address is f000:fff0 and called reset vector. This is mapped
to a ROM, the BIOS.
In this address, there is a ljmp that sets CS.

The BIOS performs several steps:

 - Map routines to write on the screen.
 
 - POST phase (depends on BIOS implementation): Check RAM consistency, test
   devices like keyboard and initialize video card.
   
 - The configuration is loaded from a CMOS (e.g. boot order).
 
 - Remaps itself in RAM for fast access.
 
 - Identify the Stage 1 bootloader (512 bytes) and loads it at address 0000:7c00
   and then jumps to it.

3) Stage 1
----------

This bootloader must be in the first sector of the disk, the MBR. Here there is
also the partition table.
The available memory is 640 kb.

At a high level, the MBR is the following:

  jmp stage1_start
  ...
  data table for partition etc...
  ...
stage1_starts:
  cli
  set all segs to 0 (except CS that is already 0 and cannot be assigned)

  Enable address A20 to enlarge addresses using the 8042 keyboard controller.
  
  Switch to 32 bit protected mode setting bit 0 of CR0 and apply changes
  updating CS with a jump
  
  Setup stack.

After this process the bootloader cannot load the kernel that is on disk, so
stage 2 is needed.

4) Protected mode
-----------------

In protected mode segments are not just numbers but indexes in the Segment
Descriptor Table.

There are 2 tables, the Global Descriptor Table pointed by the GDTR register
and the Local Descriptor Table pointed by LDTR (not used anymore).

Each segment selector contains the index to these tables, a bit to say that
if it is referred to GDT of LDT and the Requested Privilege Level (RPL).

Address resolution is done with *(GDTR + index * 8) + offset. Now
*(GDTR + index * 8) is always 0 but segmentation can't be disabled.

Each descriptor entry in the table has a Destination Privilege Level (DPL).
It describes the privilege level associated with the descriptor.

The Requested Privilege Level is present only in data segments (DS and SS)
and the Current Privilege Level (CPL) is in CS and so can be set only
with a jmp/call.

To load a segment the following formula must be true:

  MAX(CPL, RPL) <= DPL

Note that RPL can be > CPL.

Gate descriptors are used to get higher privileges (setting a proper DPL).

Gate descriptors are firmware facilities to define target code that can be
reached from userspace.
Those descriptors are referenced by the Interrupt Descriptors Table, pointed by
IDTR reg.
With the TRAP gate type the handler are located.

In Linux in the GDT there are we different code segments and data segments for
kernel and user. One GDT per core but they are almost the same. The only
entries that changes are LDT and TSS.

The TSS is the Task State Segment. It maintains a copy of the CPU state
and pointers to different privilege levels associated stacks.
DPL is 0, only kernel mode.

TSS on x64 is completely different. We still have stack pointers but no more
spaces for saved GPR.

5) Paging
---------

An additional step in address translation can be added:

 Logical Addr -> [ Segmentation ] -> Linear Addr -> [ Paging ] -> Physical Addr

The linear address now is:

 32 - 22 Directory | 21 - 12 Table | 11 - 0 Offset

The schema is that the Page Directory gives an entry of the Page Table and the
offset is used to get the physical address inside the table.

Each page table entry has a PRESENT bit, is 0 a trap is generated.

TLB cache paging mapping.

The address of the Page Directory is stored in CR3.

Physical Address Extension allows to address more than 4 GB of memory and adds
the Page pointer directory table as the first level.

In x86_64 bits 49 - 64 are short-circuited. PAE is extended with a Page
General Directory (PGD). In the entries, there is the XD bit to say if a page
is executable or not.

6) x64 Longmode
---------------

Gates for ring 3-0 are not used and the switch is more efficient.

The MSR_EFER MSR is written to enable longmode, it can be written only once.
To apply changes Linux uses an lret to startup_64 routine.

7) UEFI
-------

UEFI is completely different, the main features are:

 - Bytecode based
 - Loads firmware from nvRAM into RAM
 - Startup files stored in the EFI partition
 - The GUID Partition Table
 - Secure boot (the image of the OS is signed)

8) Cores wake up
----------------

Until now only a core worked. To wake up other cores an Inter-Processor
Interrupt is sent.

The ICR register and the LAPIC controlled is used to send to all cores except
itself an INIT-SIPI-SIPI interrupt.

The LAPIC routes the request in the APIC bus.

=========
Processes
=========

1) Process Control Block
------------------------

Each process table entry is a PCB. 

 - PC
 - Regs
 - State
 - Priority
 - Address Space
 - Open file
 - ...
 - Other flags

Lightweigth process have small PCBs (for threads).

In Linux there is an opoosite view. PCB is called task_struct. Everything is a
task and there are no differences between processes and threads.

This is one of the largest structures in the kernel, we discuss of the most 
relevant fields.

long state is the state of the task (running, zombie etc...).

Memory maps are pointers (mm_struct*) and so different task can share address
space just assigning a pointer.

struct mm_struct* mm
struct mm_struct* active_mm

Kernel thread does not have address space but they can steal address space from
another userspace task and manage that virtual memory.

if active_mm == NULL The kernel level thread is not stealing mappings from
the userspace process.

pid_t pid is the identifier of the kernel task (different from userspace pid).
pid_t tgid is the thread group id (a process id in userspace).

For the thread 0 of a process pid == tgid.

struct fs_struct* fs
struct files_struct* files

Kill trigger a signal in the active thread (by chance), raise() target a
specific thread of a process.

struct signal_struct* sig

struct thread_struct thread is a snapshot of the CPU dependent state:
TSS, FPU, CR2, perf events...

Now thread is mostly useless in x86.

int prio to implement the nice() syscall.
ulong policy for the scheduler.
int nr_cpus_allowed
cpumask_t cpus_allowed for e.g. numa stuffs.

2) MM Member
------------

In mm_struct there is a memeber called pgd that maintains the first level of the
page table. To schedule a process we write to CR3 current->mm->pgd. Each new
process has its own page table.

After pgd there is a list called vm_area_struct in which each entry is a
contiguos virtual area that can be served to user via mmap.

vm_ops are for handling special allocation/deallocation like mmapped files.

If a process wants to finish the RAM the kernel, before that, kills it.

3) PCB Location
---------------

Up to 2.6 PCB is allocated at the bottom of the kernel level stack associated
to the process.

In 2.6 the devs put a thread_info struct with a pointer to PCB insted of the PCB
at the bottom of the stack.

Many fields from thread_info were removed in 4.3.

In 3.19 for exmaple in thread_info there is the addr_limit field that can be
hijacked to allow userspace to read kernel memory (using copy_from_user) and the
restart_block that constains a function pointer called by the restart() syscall.

Stack was phisically contiguos memory via kmalloc but then this changed and now
the stack is virtually mapped using vmalloc (slower than kmalloc).
thread_info no more in stack.
There is a caching system running on top of vmalloc that is slow to create a
new kernel level stack.

current is a macro that evaluated to the current scheduled task_struct.
Early version of the macro did computation based on the SP value.
Now it is a function that reads a pre-CPU variable.

find_task_by_pid find a task_struct given a pid.
In 2.6.26 replaced by find_task_by_vpid based on virtual pids. Virtual pids
allows two process to have the same pids in different namespaces.

Currently, PCB are find not using an hashtable anymore but with a radix tree.

4) Process and Thread Creation
------------------------------

Userspace:   fork()      pthread_create() -> clone()
               |                                |
Kernel:      sys_fork ----> do_fork() <----- sys_close()

In Linux, kernel should never (at except for process creation) allocate memory
for userspace.
On thread creation the new thread stack must be allocated by userspace.
A pointer to the new stack must be passed to clone(), also the new TLS.
The kernel must properly set %fs when scheduing the thread so that the access
to thread local variables is consistent.

Common clone_flags are:
 - CLONE_VM
 - CLONE_FS if omitted setup new file system
 - CLONE_FILES share file descriptors
 - CLONE_PID
 - CLONE_PARENT set same parent as the cloner

do_fork() allocate a new PCB, a new kernel stack and copy values based on flags.

dup_mm in do_fork memcopy the current mm and create a new PGD (to implement
COW).

kthread_create() is the internal API for kernel thread creation.
kthreads are stopped at creation and must be activated with wake_up_process().

In task_struct there is the signal_mask. Signals are delivered at end of system
calls.

5) Program Start
----------------

The execve syscall wipes out the memory state, find the executable in the
filesystem and do not change most of other fileds of PCB.

struct linux_binprm {
  char buf[]
  struct page* page[]
  ulong p // current top of memory
  int sh_bang
  struct file* file
  ...
}

do_execve() open the binary file, set the top to a value proportional to number
of arguments, set serguments, filename and other stuff on the stack of the new
program.

Then search_binary_handler is called to match the binary image to a function
that can handle it. If something goes wrong all is freed.

If search_binary_handler can not find an interpreter ENOEXEC is returned.

For ELFs, load_elf_binary() is called. It loads the image via mmap, reads the
header (from \x7fELF) and set permissions.
